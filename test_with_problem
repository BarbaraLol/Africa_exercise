int main(){

    
    std::vector<double> input_values = {3.1, 4, 5, 7.4, 2, 6, 6, 0.2};
    std::vector<int>  input_rows = {0, 4, 1, 1, 3, 5, 2, 3};
    std::vector<int> input_columns = {2, 4, 2, 4, 1, 3, 1, 2};
    SparseMatrixCOO M( input_rows, input_values, input_columns);

    const SparseMatrixCOO &a_const = M;
    std::cout << a_const(10,2) << std::endl;
    
   // int x = M.n_col();
    //std::cout<< "Il numero di col è "<<x<<std::endl;


    int y = M.n_row();
        //std::cout<< "Il numero di righe è "<<y<<std::endl;
    std::cout<<"prodotto"<<std::endl;
    //matrix-vector product
    std::vector<double> x_vector = {1.0, 2.2, 3.1, 4.0, 5.0};
    std::vector<double> y_vector = M * x_vector;
    for(int i=0; i<y; i++){
        std::cout<<y_vector[i]<<std::endl;
    }

    //matrix printing function
    M.PrintMatrix();
    
   /*
   std::vector<double> input_values = {1.0,2.0,3.0,4.0};
    std::vector<int>  input_rows = {2,0,1,3};
    std::vector<int> input_columns = {2,1,0,3};
    SparseMatrixCOO M( input_rows, input_values, input_columns);
    std::vector<double> x_vector = {1.0, 2.2, 3.1, 4.0};
    int y = M.n_row();
    std::vector<double> y_vector = M * x_vector;
        for(int i=0; i<y; i++){
        std::cout<<y_vector[i]<<std::endl;
    }
    M.PrintMatrix();
    */
    return 0;
}
